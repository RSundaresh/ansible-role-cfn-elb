Description: An ELB Stack
Parameters:
  StackName:
    Description: S3 Bucket where the Lambda code is
    Type: String
  S3Key:
    Description: S3 Key where the Lambda code is
    Type: String
  S3ObjectVersion:
    Description: Version of the S3 Key to use
    Type: String
Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:  "{{ vpc_id }}"
      GroupDescription: "frontend security group"
      SecurityGroupIngress:
        {% for rule in listeners %}
        - FromPort: "{{ rule.from_port }}"
          ToPort: "{{ rule.to_port }}"
          IpProtocol: "{{ rule.proto|default('tcp') }}"
          {% if rule.cidr is defined %}CidrIp: ""{% endif %} 
          {% if rule.src_grp_id %}SourceSecurityGroupId:{% endif %}
          {% if rule.src_grp_name %}SourceSecurityGroupName:{% endif %}
          {% if rule.src_grp_owner_id %}SourceSecurityGroupOwnerId:{% endif %}
        {% endor %}
  LoadBalancerBackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: "{{ vpc_id }}"
      GroupDescription: "backend security group"
      SecurityGroupIngress:
        {% for rule in listeners %}
        - FromPort: "{{ rule.from_port }}"
          ToPort: "{{ rule.to_port }}"
          IpProtocol: "{{ rule.proto|default('tcp') }}"
          SourceSecurityGroupId: { Ref: LoadBalancerSecurityGroup }
        {% endfor %}
  {% for listener in listeners %}
  "ELB{{listener.to_port}}to{{listener.from_port}}":
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: { Ref: LoadBalancerSecurityGroup }
      IpProtocol: "{{ listener.proto }}"
      FromPort: "{{ listener.from_port }}"
      ToPort: "{{ listener.to_port }}" 
      DestinationSecurityGroupId: { Ref: LoadBalancerBackendSecurityGroup }
  {% endfor %}
